name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk:
    permissions:
      actions: read
      contents: read
      statuses: read
      security-events: write
    runs-on: ubuntu-latest
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

      - name: Run Snyk Code Test
        run: snyk code test --sarif > snyk-code.sarif || true

      - name: Run Snyk Open Source Monitor
        run: snyk monitor --all-projects || true

  sast:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'ruby,JavaScript' 

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        continue-on-error: false 

  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run OWASP Dependency-Check
        uses: jeremylong/gh-dependency-check-action@v2
        with:
          format: 'HTML' 
          scan: '.'  

      - name: Upload Dependency Scan Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-report
          path: dependency-check-report.html


#####
  build_and_push_docker_images:
    runs-on: ubuntu-latest
    needs: snyk 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}   
          password: ${{ secrets.DOCKER_PASSWORD }}   

      - name: Build Rails Docker image
        run: |
          docker build -f Dockerfile.rails -t shate1/my-rails-app:latest .
          docker build -f Dockerfile.nginx -t shate1/my-nginx-app:latest .
          docker build -f Dockerfile.react -t shate1/my-react-app:latest .
      

      - name: Push react Docker image
        run: |
          docker push shate1/my-react-app:latest
          docker push shate1/my-rails-app:latest
          docker push shate1/my-nginx-app:latest

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v1
        with:
          config-path: '.gitleaks.toml'

  container-security-scanning:
    name: Container Security Scanning
    needs: build_and_push_docker_images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: 'shate1/my-rails-app:latest'


      - name: Install Falco
        run: |
          sudo apt-get install -y dkms
          curl -s https://falco.org/repo/falcosecurity-packages.asc | sudo apt-key add -
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository -y ppa:falco-ppa/stable
          sudo apt-get update
          sudo apt-get install -y falco

      - name: Start Falco for monitoring
        run: |
          sudo falco -D > falco.log 2>&1 &
          echo "Falco is running in background"


      - name: Upload Falco log
        uses: actions/upload-artifact@v3
        with:
          name: falco-log
          path: falco.log
